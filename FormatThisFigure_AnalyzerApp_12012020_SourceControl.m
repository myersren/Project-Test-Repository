function FormatThisFigure_AnalyzerApp
    % This file tests the GIT source control feature in MATLAB.
    %FormatThisFigure_AnalyzerApp - Re-formats plots exported by the
    %                                     Simbiology Analyzer App.  
    %
    % Compatible with plots exported by the SimBiology Analyzer 
    %       App (as .fig) generated by MATLAB R2019b & R2020a
    %  
    % Generated figure file(as .fig) can be exported and saved (as .png) 
    %       using SaveThisFigure 
    %
    % Script Features:
    %   -       Removes SimBiology default legend & customizes legend output
    %           to include variable names and group names
    %
    %   -       Assigns line color & line style by variable & test group 
    %           (data, simulation, etc) respectively 
    %
    %   -       Automatically re-scales the x axis to the largest 
    %           appropriate time unit (hours, days, weeks, or months)
    %
    %   -       Allows users flexibility to manually input group 
    %           names or add a caption below the figure if desired
    %   
    %  Use Cases:  
    %   -       Handles single plot figures and multiplot figures with an
    %           even number of subplots
    %           
    %   -       Formats the current figure on the screen (as obtained by 
    %           the "gcf" command)
    %           
    %   -       Variable names are assumed to be in the form 
    %           XXXX.XXXX.VariableName, with experimental data named in the
    %           form Data.XXXXX.VariableName
    %
    %  Additional Required Scripts/Functions:
    %   -       RosaColormap
    %       
    %  Optional Inputs:
    %   -       None 
    %
    %  Original script by Dr. Meghan Pryor, Ph.D.
    %           Â© 2017 Rosa & Co. LLC
    %
    %  Revised script by Renee Myers
    %  Last revision: 20-November-2020
    % 
    %  See also GET, SET, RosaColormap, SaveThisFigure
    
    %% Remove SimBiology legend and find axis labels
    % ** DO NOT EDIT ** %
    global colors plothandle
    
    % Exported plots from SimBio have an axes with no Tag. Find that axes
    % explicitly. 
    plotAxes = findobj(gcf, 'Type', 'Axes', 'Tag', '');
    
    % Extract the number of subplots (nPlots) in each figure and the
    % number of lines (nLines) in each subplot.
    nPlots = length(plotAxes);
    nLines = length(plotAxes(1).Children);
    
    % Starting in version 9.7 (aka R2019b) SimBiology's analysis app
    % exports figures differently than prior versions due to the new (and
    % more complex) plots that can be produced. 
    if ~verLessThan('matlab', '9.7')
        
        % Delete 'labelAxes' object and look for x axis label. 
        if ~isempty(findobj(gcf,'Type', 'Axes', 'Tag', 'labelAxes'))
            labelAxes = findobj(gcf,'Type', 'Axes', 'Tag', 'labelAxes');
            delete(labelAxes);         
        end
        
        %Remove the legend produced by SimBiology's export.
        if ~isempty(findobj(gcf,'Type', 'Axes', 'Tag', 'dummyAxesForLegend'))
            delete(findobj(gcf, 'Type', 'Axes', 'Tag', 'dummyAxesForLegend'));
        end       
        
    else
        % If the matlab version is older than R2019b then SimBiology used
        % the standard legend machinery.
        delete(findobj(gcf,'Type','Legend'))
    end
     
    % Define the plothandle object to store the line objects of the axes.
    plothandle = findobj(plotAxes, 'Type', 'Line');
    
    % Reshape plothandle into a 2-D column array to store the line objects 
    % of each subplot columnwise. 
    plothandle = reshape(plothandle,nLines,nPlots);
    
    %% Re-position the Axes
    % Re-position axes to fill figure window, producing a 2 x (nPlots/2) 
    % grid of plots. 
    
    % Scale the plot width correctly for multiple columns of subplots.
    if nPlots > 1 
        w_scale = 2/nPlots;
    else
        w_scale = 1;
    end
    
    % Set the axis position parameters based on the default position 
    % ([Left Bottom Width Height]) of [0 0 1 1].
    leftBound = 0.1; 
    bottomBound = 0.17; 
    width = 0.85*w_scale; 
    height = 0.65*(1/nPlots); 

    % Initialize a counter variable colCount to create groups of two 
    % subplots within the loop if more than 2 plots are present.
    colCount = 1;
    
    %Position the axes appropriately on the figure.
    for i = nPlots:-1:1
        AxisPosition = [leftBound, bottomBound, width, height];
        set(plotAxes(i), 'InnerPosition', AxisPosition,'Units','normalized');
        bottomBound = bottomBound + height + 0.025; 
        
        %Shift the next two plots left in the grid (for multiple columns)
        if colCount/2 > 1 
            colCount = 0;
            leftBound = leftBound + width; 
        end
        colCount = colCount + 1;   
    end 
   
    %% Extract Simulation Variables
    % Clear any existing data markers.
    set(plothandle, 'Marker', 'none');

    % Dynamically create properties to store the group and variable data.
    if ~isprop(plothandle, 'Group')
        G = addprop(plothandle, 'Group');
        V = addprop(plothandle, 'Variable');
    end
    
    % Extract simulation variables and grouping information. Variable names
    % are split on a '.' delimiter, with the final substring assumed as the 
    % variable name. 
  
    for ii = 1:nPlots
        for kk = 1:nLines
            strSlice = split(plothandle(kk,ii).DisplayName, '.');
            vars(kk,ii) = strSlice(end);
            if strcmpi(strSlice(1),'Data')
                plothandle(kk,ii).Group = 'Data';
            else
               plothandle(kk,ii).Group = 'Simulation';
            end
        end
    end
  
    % Check if similarly named variables are present, comparing each 
    % variable name (s1)to the other variable names (s2) in the subplot. 
    % Replace the variable name if n_alike characters are found in common.
    try
    for ii = 1:nPlots
        for kk = 1:nLines
            s1 = vars(kk,ii);
            s2 = vars(:,ii);
            
            % Check for similar variables.
            if any(contains(s2,s1))
                simVars = s2(contains(s2,s1));
                
            elseif any(contains(s1,s2))
                simVars = s2(contains(s1,s2));
            end
 
            if exist('simVars') && ~isempty(simVars)
                % Extract the longest and shortest strings out of the similar
                % variables array simVars.
                new_var = simVars(strlength(simVars) >= max(strlength(simVars)));
                old_var = simVars(strlength(simVars) < max(strlength(simVars)));

                % If all potential strings have been replaced, exit the loop.
                if length(old_var) < 1, break; end

                % Replace the similar string with the preferred variable.
                s2((strcmp(s2,old_var))) = new_var(1);
                vars(:,ii) = s2;
            end
        end
    end
    catch
    end
    
    % Assign the variables to the "Variable" property of plothandle.
    for kk = 1:nPlots
        for ii = 1:nLines
            plothandle(ii,kk).Variable = vars(ii,kk);
        end
    end
  
    % Extract the unique variable names.
    for ii = 1:nPlots
        varNames(ii,:) = unique(vars(:,ii));
    end
    
    varNames
    %% Set Line Colors and Legend Entries
    % For plots with multiple species and groups, set plot colors and 
    % generate a legend with the variable names. If the plot contains 
    % multiple groups and a single variable, assign legend based on group
    % information.
    
    %%  Assign colors and legend based on group information
    if length(varNames) == 1 && length(plothandle) > 1 
        groupFlag = 0;

        % Get group names
        numGroups = str2double(inputdlg('Number of simulation groups: '));
        prompt = {};
        for i = 1:numGroups
            prompt{i} = sprintf('Group %d:',i);
        end 
        groupNames = inputdlg(prompt);
        
        % Create key-value pairs to map the groups to colors
        DistinctRosaColors = 7;
        cols_array = RosaColormap(DistinctRosaColors);
        groupColors = {};
        for i = 1:numel(groupNames)
            groupColors(i,:) = {cols_array(i,:)};
        end
        groupColors = reshape(groupColors,size(groupNames));

        % Create mapping for the key/value pairs.
        groupColorMap = containers.Map(groupNames,groupColors, 'UniformValues',false);
   
        % User selects group corresponding to each line in the plot.
        % Set prompts for user selection of line group/variable
        prompt = {'Select the group:'};
        for k = 1:nPlots
           for i = 1:nLines
               if ~(strcmp(plothandle(i,k).Group,'Data'))
                   %Highlight line
                   plothandle(i,k).LineWidth = 4;

                   %Prompt user to select corresponding group/variable for the line
                   group = listdlg('PromptString',prompt,'ListString',groupNames);

                   %Set the group and variable properties for each line
                   plothandle(i,k).Group = char(groupNames(group));
                   plothandle(i,k).LineStyle = '-';
                   groupKey = char(groupNames(group));
                   plothandle(i,k).Color = groupColorMap(groupKey);

                   %Restore line to original width
                   plothandle(i,k).LineWidth = 1;
               end
           end
        end
        
        % Plot empty data to generate custom legend entries for each variable.
        rowIdx = nLines+1; 
        hold(plotAxes,'on')

        for k = 1:nPlots
            for i = 1:numGroups
                groupKey = char(groupNames(i,k));
                plothandle(rowIdx,k) = plot(plotAxes(k),nan,nan);
                plothandle(rowIdx,k).Color = groupColorMap(groupKey);
                rowIdx = rowIdx + 1;
            end
            rowIdx = nLines+1; 
        end

        startIdx = nLines+1;
        endIdx = nLines+numGroups;

        
        for i = 1:nPlots
            lgdhandles(i) = legend(plotAxes(i),plothandle(startIdx:endIdx,i),...
                groupNames(:,i));
        end
        
        %Turn off the text interpreter.
        set(lgdhandles,'Interpreter','none')
    end
    
     %% Assign colors and legend based on variable information
    if  length(varNames) > 1 || length(plothandle) == 1 
        groupFlag = 1;
        DistinctRosaColors = 7;
        cols_array = RosaColormap(DistinctRosaColors);
        varColors = {};
        for i = 1:numel(varNames)
            varColors(i,:) = {cols_array(i,:)};
        end
        % Create mapping for the key/value pairs.
        varMap = containers.Map(varNames,varColors, 'UniformValues',false);

        % Assign line types and colors to the lines using the key-value
        % mapping. Set data points as markers and simulation values as lines.
        for k = 1:nPlots
            for i = 1:nLines
                varKey = char(plothandle(i,k).Variable);
                plothandle(i,k).Color = varMap(varKey);
                if strcmpi(plothandle(i,k).Group,'Data')
                    set(plothandle(i,k),'Marker','o','LineStyle','none');
                    dataFlag = 1;
                else
                    set(plothandle(i,k), 'LineStyle','-');
                end      
            end
        end

        % Plot empty data to generate custom legend entries for each variable.
        [~,numVars] = size(varNames);
        rowIdx = nLines+1; 
        hold(plotAxes,'on')

        for i = 1:numVars
            for k = 1:nPlots
                varKey = char(varNames(k,i));
                plothandle(rowIdx,k) = plot(plotAxes(k),nan,nan);
                plothandle(rowIdx,k).Color = varMap(varKey);
            end
            rowIdx = rowIdx + 1;
        end

        startIdx = nLines+1;
        endIdx = nLines+numVars;

        for i = 1:nPlots
            lgdhandles(i) = legend(plotAxes(i),plothandle(startIdx:endIdx,i),...
                varNames(i,:));
        end

        %Turn off the text interpreter.
        set(lgdhandles,'Interpreter','none')
    end
  
     %% Format Groups Legend and Group Linestyles 
    % For plots with multiple species and groups. User can select whether 
    % they would like to automate the group legend or manually input group names.
    
    % **Option 1** ('No'): Use default groups ('Data' and 'Simulation') 
    % to create a legend at the top of the figure. Data markers are used to 
    % represent data values and solid lines are used to represent 
    % simulation data. 
    
    % **Option 2** ('Yes'): Set the groups manually to create a customized 
    % group legend at the top of the figure. Users must manually input the 
    % group names to be used for the data and identify the group for each 
    % line in the plot. If only one group is identified, the lines will be
    % assigned automatically. The line style of each group type can also be 
    % customized using this option. 

    if groupFlag  % Indicates groups have not yet been assigned
    groupSelection = questdlg('Would you like to assign groups manually?');

    switch groupSelection
        case 'No'
            if exist('dataFlag') % Create groups legend
                % Plot empty data to generate group legend entries 
                clonePlotAxes = axes('position',get(gca,'position'),'Visible','off');
                hold on;
                plotsArray(1) = plot(clonePlotAxes, nan, nan,...
                    'Marker','o','LineStyle','none','Color','black');
                plotsArray(2) = plot(clonePlotAxes, nan, nan,...
                    'LineStyle','-','Color','black');
                groupLegend = legend(clonePlotAxes,{'Data','Simulation'},...
                    'Position',[0.35 0.85 0.1227 0.0300],'numcolumns',2);
            end
        case 'Yes'
          % Get the names of the simulation groups from the user 
            numGroups = str2double(inputdlg('Number of simulation groups: '));
            prompt = {};
            for i = 1:numGroups
                prompt{i} = sprintf('Group %d:',i);
            end 
            groupNames = inputdlg(prompt);
            % Create key-value pairs to map the groups to line styles
            linestyleorder={'-','--','-.',':','-o','-sq','-d','-^','-v','->','-<','-p','-h','-*','-+','-x'};
            groupLineStyles = linestyleorder(1:numGroups);
            groupMap = containers.Map(groupNames,groupLineStyles);
            
            % Set prompts for user selection of line group/variable
            prompt = {'Select the group:'};
            
            % User selects group corresponding to each line in the plot. If 
            % only one group is identified (numGroups = 1), lines are assigned 
            % automatically. 
            
            if numGroups == 1 
                for k = 1:nPlots
                    for i = 1:nLines
                        if ~(strcmp(plothandle(i,k).Group,'Data'))
                           %Set the group and variable properties for each line
                           plothandle(i,k).Group = char(groupNames(1));
                           groupKey = char(groupNames(1));
                           plothandle(i,k).LineStyle = groupMap(groupKey);
                        end
                    end
                end 
                
            elseif numGroups > 1
                for k = 1:nPlots
                   for i = 1:nLines
                       if ~(strcmp(plothandle(i,k).Group,'Data'))
                           %Highlight line
                           plothandle(i,k).LineWidth = 4;

                           %Prompt user to select corresponding group/variable for the line
                           group = listdlg('PromptString',prompt,'ListString',groupNames);

                           %Set the group and variable properties for each line
                           plothandle(i,k).Group = char(groupNames(group));
                           groupKey = char(groupNames(group));
                           plothandle(i,k).LineStyle = groupMap(groupKey);

                           %Restore line to original width
                           plothandle(i,k).LineWidth = 1;
                       end
                    end
                end
            end
            
                % Plot empty data to generate custom group legend entries 
                clonePlotAxes = axes('position',get(gca,'position'),'Visible','off');
                hold on;
                plotsArray(1) = plot(clonePlotAxes, nan, nan, ...
                    'Marker','o','Color','black');
                for i = 2:numGroups+1
                    plotsArray(i) = plot(clonePlotAxes, nan, nan, ...
                        'LineStyle',linestyleorder{i-1},'Color','black');
                end

                %Create legend
                if exist('dataFlag') % Create groups legend if data entries present
                    groups = {'Data',groupNames{:}};
                    groupLegend = legend(clonePlotAxes,groups,...
                        'Position',[0.35 0.85 0.1227 0.0300],'numcolumns',numGroups+1);
                else
                    groups = {groupNames{:}};
                    groupLegend = legend(clonePlotAxes,groups,...
                        'Position',[0.35 0.85 0.1227 0.0300],'numcolumns',numGroups+1);
                end

             end

    end 
     
    % Link the properties of the group legend and axis clone so they change
    % as the plot features are updated. Additional properties can be added
    % to the links as desired. 

    if exist('groupLegend')
        plotLink = linkprop([plotsArray,plothandle(1,:)],'LineWidth');  
        lgdLink = linkprop([groupLegend,lgdhandles],{'FontName','FontSize','Box'});
    end
    
    %% ***Plot Customization***
    % Edit and add any figure/axis/legend properties you would like to be
    % standardized for each figure of the project. Below are some examples.
    % Comment/uncomment as needed.
    %% figure size/shape
    %set(gcf,'Position',[360   427   455   271])
    
    %% figure mods
    % Sets the box and turns off the grid for both plots.
    set(plotAxes, 'Box', 'on');
    for i = 1:nPlots
        grid(plotAxes(i), 'off');
    end
    
    %% axis mods
    set(plotAxes,'FontName','Calibri');
    set(plotAxes, 'FontSize',18);
    set(plotAxes, 'TickDir','both');
    
    %% Set x axis limits 
   
    if plothandle(1).XData(end) >= 0
        set(plotAxes, 'XLim', [0 plothandle(1).XData(end)]);

        % Get current time units
        timesList = {'Months', 'Weeks', 'Days', 'Hours', 'Minutes'};
        timeUnit = timesList{listdlg('PromptString','Select current time units of plot data:', 'ListString', timesList, 'SelectionMode', 'single')};
         
        % Automatically scale the x axis 
        timeUnitLabels = {'Months','Weeks','Days','Hours', 'Minutes'};
        timeIndex = find(strcmpi(timeUnitLabels, timeUnit));
        hourScale = [672, 168, 24, 1 (1/60)];
    
        SimEndTime = plothandle(1).XData(end);
        numHours = SimEndTime*hourScale(timeIndex);
   
        % Time units
        numMinutes = numHours*60;
        numDays = numHours/24;
        numWeeks = numDays/7;
        numMonths = numWeeks/4;

        times = [numMonths, numWeeks, numDays, numHours, numMinutes];
    
        % Find the largest appropriate time unit for the x axis.
        for i = 1:length(times)
            if rem(times(i),1) == 0 && ~mod(times(i),4)
                bestTimeUnit = timeUnitLabels{i};
                endTime = times(i);
                timeUnitIdx = i;
                break;
            end
        end
        
        % Set default to original units if the system is unable to space over equal intervals
        if ~exist('endTime') && ~exist('timeUnitIdx')
            endTime = SimEndTime; 
            timeUnitIdx = timeIndex;
        end

        set(plotAxes,'XTick',linspace(0,SimEndTime,5));
          
        if nPlots > 1
            for ii = 2:2:nPlots
                set(plotAxes(ii), 'XTickLabel',linspace(0,endTime,5));
            end
        else
            set(plotAxes(1), 'XTickLabel',linspace(0,endTime,5));
        end
    end 
    
    % Set default x axis label
    xLabel = sprintf('Time (%s)', timeUnitLabels{timeUnitIdx});
    if nPlots > 1
        for ii = 2:2:nPlots
            set(plotAxes(ii).XLabel, 'String', xLabel);
        end
    else
        set(plotAxes(1).XLabel, 'String', xLabel);
    end
   
    %%  Set y axis limits
    % Find the maximum y values in each subplot.
    for i = 1:nPlots
       yMax(i) = max([plothandle(:,i).YData]);
       yMin(i) = min([plothandle(:,i).YData]);
    end
     
    % Set the percentage the y axis will be above the maximum y value(s)
    % where 1.1 = 10% above the max value, 1.15 = 15% above, etc.
    yAxisPad = 1.1; 
     
    if plothandle(1).YData(end) >= 0
        for i = 1:nPlots
            yUpperBound = ceil(yMax(i)*yAxisPad);
            yLowerBound = floor(yMin(i)*(1/yAxisPad));
            set(plotAxes(i), 'YLim', [yLowerBound yUpperBound]);
        end
    end

    %% line details
    set(plothandle,'linewidth',3);
    set(plothandle,'markersize',8);
    %set(plothandle,'MarkerIndices',)
    
    %% legend mods
    % Turn off the legend box.
     set(lgdhandles,'Box','off')
    
    % Customize the legend font.
    set(lgdhandles,'FontName','Calibri');
    set(lgdhandles,'FontSize',14); 
    
    %% add error bars
    % Use exported data from SimBiology (upper and lower data bounds) to
    % generate error bars for the plot. This section assumes the values in
    % the upper and lower bounds arrays correspond to the same x values as
    % the data. Users must put in the arrays corresponding to the
    % upper/lower bounds manually. The data points of interest are 
    % highlighted to prompt the user to put in the correct arrays. 
    
%     for i = 1:nPlots
%         for k = 1:nLines
%             if strcmp(plothandle(k,i).Group, 'Data')
%                 restoreSize = plothandle(k,i).MarkerSize;
%                 plothandle(k,i).MarkerSize = 20;
%                 x = plothandle(k,i).XData;
%                 y = plothandle(k,i).YData;
%                 yUpper = input('Upper Bound (from Workspace): ');
%                 yLower = input('Lower Bound (from Workspace): ');
%                 y_pos = yUpper - y;
%                 y_neg = yLower - y;
%                 errorbar(x,y,y_neg,y_pos);
%                 plothandle(k,i).MarkerSize = restoreSize;
%             end
%         end
%     end 
    
%% USER CUSTOMIZATION OPTIONS
setCustomizePlot = questdlg('Would you like to modify the x/y axis labels, plot title, or legend location?');
switch setCustomizePlot
    case 'Yes'
    %% Add plot title
    setCustomTitle = questdlg('Customize plot title?');
    switch setCustomTitle
        case 'Yes'
            plotTitle = char(inputdlg('Plot title:'));           
            set(plotAxes(1).Title, 'String',plotTitle)
            set(plotAxes(1).Title,'Units','normalized','Position',[0.5 1.1 0]);
    %% Customize x and y axis labels
     % Set custom x and y axis labels. Take user input if no labels are found.   
     setCustomXLabel = questdlg('Customize x axis label?');
     switch setCustomXLabel
        case 'Yes'
            xLabel = char(inputdlg('X axis label:'));
     end
    
    % Set custom x axis label
    if nPlots > 1
        for ii = 2:2:nPlots
            set(plotAxes(ii).XLabel, 'String', xLabel);
        end
    else
        set(plotAxes(1).XLabel, 'String', xLabel);
    end
    
    % Set custom y axis label 
    setCustomYLabel = questdlg('Customize y axis label?');
    switch setCustomYLabel
        case 'Yes'
            for i = 1:length(plotAxes)
                set(plotAxes(i).YLabel, 'Color', [1,0,0])
                yLabel = char(inputdlg('Y axis label (highlighted on plot):'));
                set(plotAxes(i).YLabel, 'String', yLabel);
                set(plotAxes(i).YLabel, 'Color', [0,0,0]);
            end
    end
    
    %% Set legend location
    setLegendPosition = questdlg('Move legend?');
    switch setLegendPosition
        case 'Yes'
            lgdOptions = {'north','south','east','west','eastoutside','westoutside','best'};
            lgdInput = listdlg('PromptString','Select location for legend','ListString',lgdOptions);
            set(lgdhandles,'Location',lgdOptions{lgdInput});
    end
end
    %% set caption
    % NOTE (Renee): I have set this up to use an input dialog box to take
    % user input to create the caption. Additional fields can be
    % added to the prompt variable if desired. The code could also be
    % modified to take information from an external source if desired. 
    
    captionSelect = questdlg('Would you like to add a caption?');
    
    switch captionSelect
        case 'Yes'
            prompt = {'Enter the file name: ', 'Variant: ', 'Dosage: '};
            annotateInfo = inputdlg(prompt);
            annotateString = sprintf('Rosa and Co LLC. %s \t Variant: %s \t Dosage: %s \t',...
                annotateInfo{1},annotateInfo{2}, annotateInfo{3});

            %Set the position [left bottom width height] for the caption.
            dim = [0.08 0 0.9 0.08];
            caption = annotation('textbox', dim,'String',annotateString);
            
            %Modify the properties of the annotation box.
            set(caption, 'FontName','Calibri','FontSize',10,...
                'LineStyle','none','VerticalAlignment','bottom',...
                'HorizontalAlignment','left','Interpreter','none');
    end
    
    %% Delete dynamic properties for the group and variable data
    delete(G)
	delete(V)
end
